/*
 * Content Services client
 * Manage content items through multiple repositories.
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.content.services.api;

import com.example.content.services.invoker.ApiException;
import com.example.content.services.model.RetentionPolicy;
import java.util.Set;
import com.example.content.services.model.StatusMessage;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;


/**
 * API tests for RetentionPoliciesManagementApi
 */
@Ignore
public class RetentionPoliciesManagementApiTest {

    private final RetentionPoliciesManagementApi api = new RetentionPoliciesManagementApi();

    
    /**
     * 
     *
     * Returns a list of retention policies added to the given repository.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addRetentionPoliciesForRepositoryTest() throws ApiException {
        String repositoryId = null;
        Set<String> requestBody = null;
        List<RetentionPolicy> response = 
        api.addRetentionPoliciesForRepository(repositoryId, requestBody);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Creates a retention policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRetentionPolicyTest() throws ApiException {
        RetentionPolicy retentionPolicy = null;
        RetentionPolicy response = 
        api.createRetentionPolicy(retentionPolicy);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Deletes a retention policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRetentionPolicyTest() throws ApiException {
        String policyId = null;
        
        api.deleteRetentionPolicy(policyId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * detach all Retention Policies of a given repositoryId.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void detachRetentionPoliciesTest() throws ApiException {
        String repositoryId = null;
        Set<String> requestBody = null;
        List<RetentionPolicy> response = 
        api.detachRetentionPolicies(repositoryId, requestBody);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns all the existent retention policies
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllRetentionPoliciesTest() throws ApiException {
        List<RetentionPolicy> response = 
        api.getAllRetentionPolicies();
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns a list of retention policies for a reposity.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRetentionPoliciesForRepositoryTest() throws ApiException {
        String repositoryId = null;
        List<RetentionPolicy> response = 
        api.getRetentionPoliciesForRepository(repositoryId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Returns the requested retention policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRetentionPolicyTest() throws ApiException {
        String policyId = null;
        RetentionPolicy response = 
        api.getRetentionPolicy(policyId);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Runs the given retention policies to the specified repositoryId.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void runRetentionPolicyTest() throws ApiException {
        String repositoryId = null;
        Set<String> requestBody = null;
        String response = 
        api.runRetentionPolicy(repositoryId, requestBody);
        
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updates a retention policy.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRetentionPolicyforRepositoryTest() throws ApiException {
        String policyId = null;
        RetentionPolicy retentionPolicy = null;
        RetentionPolicy response = 
        api.updateRetentionPolicyforRepository(policyId, retentionPolicy);
        
        // TODO: test validations
    }
    
}
