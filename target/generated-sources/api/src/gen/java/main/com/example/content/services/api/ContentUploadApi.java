/*
 * Content Services client
 * Manage content items through multiple repositories.
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.example.content.services.api;

import com.example.content.services.invoker.ApiClient;
import com.example.content.services.invoker.ApiException;
import com.example.content.services.invoker.ApiResponse;
import com.example.content.services.invoker.Pair;

import com.example.content.services.model.Document;
import java.io.File;
import com.example.content.services.model.StatusMessage;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ContentUploadApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ContentUploadApi() {
    this(new ApiClient());
  }

  public ContentUploadApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * Performs uploading of content
   * @param repositoryId ID of the repository to save and/or update uploaded content items. (required)
   * @param targetPath Path where the item should be added. (required)
   * @param _file File to upload. (required)
   * @param name File name. (required)
   * @param cmisColonObjectTypeId Document Object Type ID property. (optional)
   * @param cmisColonCreatedBy Document created by property. (optional)
   * @param cmisColonLastModifiedBy Document last modified by property. (optional)
   * @param bbColonTitle Document title property. (optional)
   * @param bbColonLocale Document locale property. (optional)
   * @param changeToken Document change token property. (optional)
   * @param createSignedUrl If storage type supports generation of signed url for given content, setting this to true will generate a signed url for a limited time. (optional, default to false)
   * @return Document
   * @throws ApiException if fails to make API call
   */
  public Document handleContentUpload(String repositoryId, String targetPath, File _file, String name, String cmisColonObjectTypeId, String cmisColonCreatedBy, String cmisColonLastModifiedBy, String bbColonTitle, String bbColonLocale, String changeToken, Boolean createSignedUrl) throws ApiException {
    ApiResponse<Document> localVarResponse = handleContentUploadWithHttpInfo(repositoryId, targetPath, _file, name, cmisColonObjectTypeId, cmisColonCreatedBy, cmisColonLastModifiedBy, bbColonTitle, bbColonLocale, changeToken, createSignedUrl);
    return localVarResponse.getData();
  }

  /**
   * 
   * Performs uploading of content
   * @param repositoryId ID of the repository to save and/or update uploaded content items. (required)
   * @param targetPath Path where the item should be added. (required)
   * @param _file File to upload. (required)
   * @param name File name. (required)
   * @param cmisColonObjectTypeId Document Object Type ID property. (optional)
   * @param cmisColonCreatedBy Document created by property. (optional)
   * @param cmisColonLastModifiedBy Document last modified by property. (optional)
   * @param bbColonTitle Document title property. (optional)
   * @param bbColonLocale Document locale property. (optional)
   * @param changeToken Document change token property. (optional)
   * @param createSignedUrl If storage type supports generation of signed url for given content, setting this to true will generate a signed url for a limited time. (optional, default to false)
   * @return ApiResponse&lt;Document&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Document> handleContentUploadWithHttpInfo(String repositoryId, String targetPath, File _file, String name, String cmisColonObjectTypeId, String cmisColonCreatedBy, String cmisColonLastModifiedBy, String bbColonTitle, String bbColonLocale, String changeToken, Boolean createSignedUrl) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = handleContentUploadRequestBuilder(repositoryId, targetPath, _file, name, cmisColonObjectTypeId, cmisColonCreatedBy, cmisColonLastModifiedBy, bbColonTitle, bbColonLocale, changeToken, createSignedUrl);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("handleContentUpload", localVarResponse);
        }
        return new ApiResponse<Document>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Document>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder handleContentUploadRequestBuilder(String repositoryId, String targetPath, File _file, String name, String cmisColonObjectTypeId, String cmisColonCreatedBy, String cmisColonLastModifiedBy, String bbColonTitle, String bbColonLocale, String changeToken, Boolean createSignedUrl) throws ApiException {
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling handleContentUpload");
    }
    // verify the required parameter 'targetPath' is set
    if (targetPath == null) {
      throw new ApiException(400, "Missing the required parameter 'targetPath' when calling handleContentUpload");
    }
    // verify the required parameter '_file' is set
    if (_file == null) {
      throw new ApiException(400, "Missing the required parameter '_file' when calling handleContentUpload");
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(400, "Missing the required parameter 'name' when calling handleContentUpload");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/client-api/repositories/{repositoryId}/upload"
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
