/*
 * Content Services client
 * Manage content items through multiple repositories.
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.example.content.services.api;

import com.example.content.services.invoker.ApiClient;
import com.example.content.services.invoker.ApiException;
import com.example.content.services.invoker.ApiResponse;
import com.example.content.services.invoker.Pair;

import com.example.content.services.model.RetentionPolicy;
import java.util.Set;
import com.example.content.services.model.StatusMessage;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RetentionPoliciesManagementApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public RetentionPoliciesManagementApi() {
    this(new ApiClient());
  }

  public RetentionPoliciesManagementApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * Returns a list of retention policies added to the given repository.
   * @param repositoryId The Identifier of the Repository to process. (required)
   * @param requestBody  (optional
   * @return List&lt;RetentionPolicy&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RetentionPolicy> addRetentionPoliciesForRepository(String repositoryId, Set<String> requestBody) throws ApiException {
    ApiResponse<List<RetentionPolicy>> localVarResponse = addRetentionPoliciesForRepositoryWithHttpInfo(repositoryId, requestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns a list of retention policies added to the given repository.
   * @param repositoryId The Identifier of the Repository to process. (required)
   * @param requestBody  (optional
   * @return ApiResponse&lt;List&lt;RetentionPolicy&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RetentionPolicy>> addRetentionPoliciesForRepositoryWithHttpInfo(String repositoryId, Set<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = addRetentionPoliciesForRepositoryRequestBuilder(repositoryId, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("addRetentionPoliciesForRepository", localVarResponse);
        }
        return new ApiResponse<List<RetentionPolicy>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RetentionPolicy>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder addRetentionPoliciesForRepositoryRequestBuilder(String repositoryId, Set<String> requestBody) throws ApiException {
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling addRetentionPoliciesForRepository");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/client-api/repositories/{repositoryId}/retention-policies"
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Creates a retention policy.
   * @param retentionPolicy Retention Policy to create. (required)
   * @return RetentionPolicy
   * @throws ApiException if fails to make API call
   */
  public RetentionPolicy createRetentionPolicy(RetentionPolicy retentionPolicy) throws ApiException {
    ApiResponse<RetentionPolicy> localVarResponse = createRetentionPolicyWithHttpInfo(retentionPolicy);
    return localVarResponse.getData();
  }

  /**
   * 
   * Creates a retention policy.
   * @param retentionPolicy Retention Policy to create. (required)
   * @return ApiResponse&lt;RetentionPolicy&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RetentionPolicy> createRetentionPolicyWithHttpInfo(RetentionPolicy retentionPolicy) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createRetentionPolicyRequestBuilder(retentionPolicy);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createRetentionPolicy", localVarResponse);
        }
        return new ApiResponse<RetentionPolicy>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetentionPolicy>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createRetentionPolicyRequestBuilder(RetentionPolicy retentionPolicy) throws ApiException {
    // verify the required parameter 'retentionPolicy' is set
    if (retentionPolicy == null) {
      throw new ApiException(400, "Missing the required parameter 'retentionPolicy' when calling createRetentionPolicy");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/client-api/retention-policies";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(retentionPolicy);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Deletes a retention policy.
   * @param policyId The Identifier of the Retention policy to process. (required)
   * @throws ApiException if fails to make API call
   */
  public void deleteRetentionPolicy(String policyId) throws ApiException {
    deleteRetentionPolicyWithHttpInfo(policyId);
  }

  /**
   * 
   * Deletes a retention policy.
   * @param policyId The Identifier of the Retention policy to process. (required)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> deleteRetentionPolicyWithHttpInfo(String policyId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = deleteRetentionPolicyRequestBuilder(policyId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("deleteRetentionPolicy", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder deleteRetentionPolicyRequestBuilder(String policyId) throws ApiException {
    // verify the required parameter 'policyId' is set
    if (policyId == null) {
      throw new ApiException(400, "Missing the required parameter 'policyId' when calling deleteRetentionPolicy");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/client-api/retention-policies/{policyId}"
        .replace("{policyId}", ApiClient.urlEncode(policyId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * detach all Retention Policies of a given repositoryId.
   * @param repositoryId The Identifier of the Repository to process. (required)
   * @param requestBody  (optional
   * @return List&lt;RetentionPolicy&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RetentionPolicy> detachRetentionPolicies(String repositoryId, Set<String> requestBody) throws ApiException {
    ApiResponse<List<RetentionPolicy>> localVarResponse = detachRetentionPoliciesWithHttpInfo(repositoryId, requestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * detach all Retention Policies of a given repositoryId.
   * @param repositoryId The Identifier of the Repository to process. (required)
   * @param requestBody  (optional
   * @return ApiResponse&lt;List&lt;RetentionPolicy&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RetentionPolicy>> detachRetentionPoliciesWithHttpInfo(String repositoryId, Set<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = detachRetentionPoliciesRequestBuilder(repositoryId, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("detachRetentionPolicies", localVarResponse);
        }
        return new ApiResponse<List<RetentionPolicy>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RetentionPolicy>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder detachRetentionPoliciesRequestBuilder(String repositoryId, Set<String> requestBody) throws ApiException {
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling detachRetentionPolicies");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/client-api/repositories/{repositoryId}/retention-policies"
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("DELETE", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Returns all the existent retention policies
   * @return List&lt;RetentionPolicy&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RetentionPolicy> getAllRetentionPolicies() throws ApiException {
    ApiResponse<List<RetentionPolicy>> localVarResponse = getAllRetentionPoliciesWithHttpInfo();
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns all the existent retention policies
   * @return ApiResponse&lt;List&lt;RetentionPolicy&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RetentionPolicy>> getAllRetentionPoliciesWithHttpInfo() throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getAllRetentionPoliciesRequestBuilder();
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getAllRetentionPolicies", localVarResponse);
        }
        return new ApiResponse<List<RetentionPolicy>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RetentionPolicy>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getAllRetentionPoliciesRequestBuilder() throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/client-api/retention-policies";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Returns a list of retention policies for a reposity.
   * @param repositoryId The Identifier of the Repository to process. (required)
   * @return List&lt;RetentionPolicy&gt;
   * @throws ApiException if fails to make API call
   */
  public List<RetentionPolicy> getRetentionPoliciesForRepository(String repositoryId) throws ApiException {
    ApiResponse<List<RetentionPolicy>> localVarResponse = getRetentionPoliciesForRepositoryWithHttpInfo(repositoryId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns a list of retention policies for a reposity.
   * @param repositoryId The Identifier of the Repository to process. (required)
   * @return ApiResponse&lt;List&lt;RetentionPolicy&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<List<RetentionPolicy>> getRetentionPoliciesForRepositoryWithHttpInfo(String repositoryId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRetentionPoliciesForRepositoryRequestBuilder(repositoryId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRetentionPoliciesForRepository", localVarResponse);
        }
        return new ApiResponse<List<RetentionPolicy>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<List<RetentionPolicy>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRetentionPoliciesForRepositoryRequestBuilder(String repositoryId) throws ApiException {
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling getRetentionPoliciesForRepository");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/client-api/repositories/{repositoryId}/retention-policies"
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Returns the requested retention policy.
   * @param policyId The Identifier of the Retention policy to process. (required)
   * @return RetentionPolicy
   * @throws ApiException if fails to make API call
   */
  public RetentionPolicy getRetentionPolicy(String policyId) throws ApiException {
    ApiResponse<RetentionPolicy> localVarResponse = getRetentionPolicyWithHttpInfo(policyId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns the requested retention policy.
   * @param policyId The Identifier of the Retention policy to process. (required)
   * @return ApiResponse&lt;RetentionPolicy&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RetentionPolicy> getRetentionPolicyWithHttpInfo(String policyId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRetentionPolicyRequestBuilder(policyId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRetentionPolicy", localVarResponse);
        }
        return new ApiResponse<RetentionPolicy>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetentionPolicy>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRetentionPolicyRequestBuilder(String policyId) throws ApiException {
    // verify the required parameter 'policyId' is set
    if (policyId == null) {
      throw new ApiException(400, "Missing the required parameter 'policyId' when calling getRetentionPolicy");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/client-api/retention-policies/{policyId}"
        .replace("{policyId}", ApiClient.urlEncode(policyId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Runs the given retention policies to the specified repositoryId.
   * @param repositoryId The Identifier of the repository to use for the retention policies check. (required)
   * @param requestBody Retention policies to run on this repository. (optional
   * @return String
   * @throws ApiException if fails to make API call
   */
  public String runRetentionPolicy(String repositoryId, Set<String> requestBody) throws ApiException {
    ApiResponse<String> localVarResponse = runRetentionPolicyWithHttpInfo(repositoryId, requestBody);
    return localVarResponse.getData();
  }

  /**
   * 
   * Runs the given retention policies to the specified repositoryId.
   * @param repositoryId The Identifier of the repository to use for the retention policies check. (required)
   * @param requestBody Retention policies to run on this repository. (optional
   * @return ApiResponse&lt;String&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<String> runRetentionPolicyWithHttpInfo(String repositoryId, Set<String> requestBody) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = runRetentionPolicyRequestBuilder(repositoryId, requestBody);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("runRetentionPolicy", localVarResponse);
        }
        return new ApiResponse<String>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<String>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder runRetentionPolicyRequestBuilder(String repositoryId, Set<String> requestBody) throws ApiException {
    // verify the required parameter 'repositoryId' is set
    if (repositoryId == null) {
      throw new ApiException(400, "Missing the required parameter 'repositoryId' when calling runRetentionPolicy");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/client-api/retention-policies/run/{repositoryId}"
        .replace("{repositoryId}", ApiClient.urlEncode(repositoryId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "text/plain, application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(requestBody);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Updates a retention policy.
   * @param policyId The Identifier of the Retention policy to process. (required)
   * @param retentionPolicy Request Policy to update. (required)
   * @return RetentionPolicy
   * @throws ApiException if fails to make API call
   */
  public RetentionPolicy updateRetentionPolicyforRepository(String policyId, RetentionPolicy retentionPolicy) throws ApiException {
    ApiResponse<RetentionPolicy> localVarResponse = updateRetentionPolicyforRepositoryWithHttpInfo(policyId, retentionPolicy);
    return localVarResponse.getData();
  }

  /**
   * 
   * Updates a retention policy.
   * @param policyId The Identifier of the Retention policy to process. (required)
   * @param retentionPolicy Request Policy to update. (required)
   * @return ApiResponse&lt;RetentionPolicy&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RetentionPolicy> updateRetentionPolicyforRepositoryWithHttpInfo(String policyId, RetentionPolicy retentionPolicy) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = updateRetentionPolicyforRepositoryRequestBuilder(policyId, retentionPolicy);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("updateRetentionPolicyforRepository", localVarResponse);
        }
        return new ApiResponse<RetentionPolicy>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RetentionPolicy>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder updateRetentionPolicyforRepositoryRequestBuilder(String policyId, RetentionPolicy retentionPolicy) throws ApiException {
    // verify the required parameter 'policyId' is set
    if (policyId == null) {
      throw new ApiException(400, "Missing the required parameter 'policyId' when calling updateRetentionPolicyforRepository");
    }
    // verify the required parameter 'retentionPolicy' is set
    if (retentionPolicy == null) {
      throw new ApiException(400, "Missing the required parameter 'retentionPolicy' when calling updateRetentionPolicyforRepository");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/client-api/retention-policies/{policyId}"
        .replace("{policyId}", ApiClient.urlEncode(policyId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(retentionPolicy);
      localVarRequestBuilder.method("PUT", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
