/*
 * Content Services client
 * Manage content items through multiple repositories.
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.example.content.services.api;

import com.example.content.services.invoker.ApiClient;
import com.example.content.services.invoker.ApiException;
import com.example.content.services.invoker.ApiResponse;
import com.example.content.services.invoker.Pair;

import com.example.content.services.model.Document;
import com.example.content.services.model.DocumentToMove;
import com.example.content.services.model.DocumentToSave;
import com.example.content.services.model.ItemToRevert;
import com.example.content.services.model.QueryRequest;
import com.example.content.services.model.RemoveRequest;
import java.util.Set;
import com.example.content.services.model.StatusMessage;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ContentManagementApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public ContentManagementApi() {
    this(new ApiClient());
  }

  public ContentManagementApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * Performs moving of documents.
   * @param documentToMove  (optional
   * @return Set&lt;Document&gt;
   * @throws ApiException if fails to make API call
   */
  public Set<Document> moveContent(List<DocumentToMove> documentToMove) throws ApiException {
    ApiResponse<Set<Document>> localVarResponse = moveContentWithHttpInfo(documentToMove);
    return localVarResponse.getData();
  }

  /**
   * 
   * Performs moving of documents.
   * @param documentToMove  (optional
   * @return ApiResponse&lt;Set&lt;Document&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Set<Document>> moveContentWithHttpInfo(List<DocumentToMove> documentToMove) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = moveContentRequestBuilder(documentToMove);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("moveContent", localVarResponse);
        }
        return new ApiResponse<Set<Document>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Set<Document>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder moveContentRequestBuilder(List<DocumentToMove> documentToMove) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/client-api/content/move";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(documentToMove);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Performs a content query.
   * @param queryRequest Performs a content query. (optional)
   * @return Set&lt;Document&gt;
   * @throws ApiException if fails to make API call
   */
  public Set<Document> queryContent(QueryRequest queryRequest) throws ApiException {
    ApiResponse<Set<Document>> localVarResponse = queryContentWithHttpInfo(queryRequest);
    return localVarResponse.getData();
  }

  /**
   * 
   * Performs a content query.
   * @param queryRequest Performs a content query. (optional)
   * @return ApiResponse&lt;Set&lt;Document&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Set<Document>> queryContentWithHttpInfo(QueryRequest queryRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = queryContentRequestBuilder(queryRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("queryContent", localVarResponse);
        }
        return new ApiResponse<Set<Document>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Set<Document>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder queryContentRequestBuilder(QueryRequest queryRequest) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/client-api/content/query";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(queryRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Performs deletion of documents by their ids.
   * @param removeRequest Performs deletion of documents by their ids. (optional)
   * @throws ApiException if fails to make API call
   */
  public void removeContent(RemoveRequest removeRequest) throws ApiException {
    removeContentWithHttpInfo(removeRequest);
  }

  /**
   * 
   * Performs deletion of documents by their ids.
   * @param removeRequest Performs deletion of documents by their ids. (optional)
   * @return ApiResponse&lt;Void&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Void> removeContentWithHttpInfo(RemoveRequest removeRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = removeContentRequestBuilder(removeRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("removeContent", localVarResponse);
        }
        return new ApiResponse<Void>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          
          null
        );
      } finally {
        // Drain the InputStream
        while (localVarResponse.body().read() != -1) {
            // Ignore
        }
        localVarResponse.body().close();
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder removeContentRequestBuilder(RemoveRequest removeRequest) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/client-api/content/remove";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(removeRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Performs documents reverting to specific versions.
   * @param itemToRevert Performs documents reverting to specific versions. (optional
   * @return Set&lt;Document&gt;
   * @throws ApiException if fails to make API call
   */
  public Set<Document> revertContent(List<ItemToRevert> itemToRevert) throws ApiException {
    ApiResponse<Set<Document>> localVarResponse = revertContentWithHttpInfo(itemToRevert);
    return localVarResponse.getData();
  }

  /**
   * 
   * Performs documents reverting to specific versions.
   * @param itemToRevert Performs documents reverting to specific versions. (optional
   * @return ApiResponse&lt;Set&lt;Document&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Set<Document>> revertContentWithHttpInfo(List<ItemToRevert> itemToRevert) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = revertContentRequestBuilder(itemToRevert);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("revertContent", localVarResponse);
        }
        return new ApiResponse<Set<Document>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Set<Document>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder revertContentRequestBuilder(List<ItemToRevert> itemToRevert) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/client-api/content/revert";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(itemToRevert);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
  /**
   * 
   * Performs creation or update of documents.
   * @param updateProperties Determines whether during content update properties from save request should be also updated (if true). Default value is false. (optional, default to false)
   * @param documentToSave Performs creation or update of documents. (optional
   * @return Set&lt;Document&gt;
   * @throws ApiException if fails to make API call
   */
  public Set<Document> saveContent(Boolean updateProperties, List<DocumentToSave> documentToSave) throws ApiException {
    ApiResponse<Set<Document>> localVarResponse = saveContentWithHttpInfo(updateProperties, documentToSave);
    return localVarResponse.getData();
  }

  /**
   * 
   * Performs creation or update of documents.
   * @param updateProperties Determines whether during content update properties from save request should be also updated (if true). Default value is false. (optional, default to false)
   * @param documentToSave Performs creation or update of documents. (optional
   * @return ApiResponse&lt;Set&lt;Document&gt;&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Set<Document>> saveContentWithHttpInfo(Boolean updateProperties, List<DocumentToSave> documentToSave) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = saveContentRequestBuilder(updateProperties, documentToSave);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("saveContent", localVarResponse);
        }
        return new ApiResponse<Set<Document>>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<Set<Document>>() {}) // closes the InputStream
          
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder saveContentRequestBuilder(Boolean updateProperties, List<DocumentToSave> documentToSave) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/client-api/content/save";

    List<Pair> localVarQueryParams = new ArrayList<>();
    localVarQueryParams.addAll(ApiClient.parameterToPairs("updateProperties", updateProperties));

    if (!localVarQueryParams.isEmpty()) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(documentToSave);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }
}
