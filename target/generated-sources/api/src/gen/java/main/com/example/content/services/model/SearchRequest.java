/*
 * Content Services client
 * Manage content items through multiple repositories.
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.content.services.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;


/**
 * Content Api provides search functionality as a replacement for CMIS
 */
@ApiModel(description = "Content Api provides search functionality as a replacement for CMIS")
@JsonPropertyOrder({
  SearchRequest.JSON_PROPERTY_SEARCH_TERM,
  SearchRequest.JSON_PROPERTY_PATHS,
  SearchRequest.JSON_PROPERTY_REPOSITORIES,
  SearchRequest.JSON_PROPERTY_PROPERTIES
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class SearchRequest {
  public static final String JSON_PROPERTY_SEARCH_TERM = "searchTerm";
  private String searchTerm;

  public static final String JSON_PROPERTY_PATHS = "paths";
  private Set<String> paths = null;

  public static final String JSON_PROPERTY_REPOSITORIES = "repositories";
  private Set<String> repositories = null;

  public static final String JSON_PROPERTY_PROPERTIES = "properties";
  private Map<String, String> properties = null;

  public SearchRequest() { 
  }

  public SearchRequest searchTerm(String searchTerm) {
    this.searchTerm = searchTerm;
    return this;
  }

   /**
   * Free text string to be searched
   * @return searchTerm
  **/
  @javax.annotation.Nullable
 @Size(min=1,max=765)  @ApiModelProperty(value = "Free text string to be searched")
  @JsonProperty(JSON_PROPERTY_SEARCH_TERM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSearchTerm() {
    return searchTerm;
  }


  @JsonProperty(JSON_PROPERTY_SEARCH_TERM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSearchTerm(String searchTerm) {
    this.searchTerm = searchTerm;
  }


  public SearchRequest paths(Set<String> paths) {
    this.paths = paths;
    return this;
  }

  public SearchRequest addPathsItem(String pathsItem) {
    if (this.paths == null) {
      this.paths = new LinkedHashSet<>();
    }
    this.paths.add(pathsItem);
    return this;
  }

   /**
   * List of paths of content to be searched. Folders can be omitted by adding &#39;!&#39; as prefix. For Ex: paths: [&#39;/&#39;, &#39;!/Generated content&#39;] will search on &#39;/ &#39; except &#39;!/Generated content&#39;
   * @return paths
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of paths of content to be searched. Folders can be omitted by adding '!' as prefix. For Ex: paths: ['/', '!/Generated content'] will search on '/ ' except '!/Generated content'")
  @JsonProperty(JSON_PROPERTY_PATHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getPaths() {
    return paths;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_PATHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaths(Set<String> paths) {
    this.paths = paths;
  }


  public SearchRequest repositories(Set<String> repositories) {
    this.repositories = repositories;
    return this;
  }

  public SearchRequest addRepositoriesItem(String repositoriesItem) {
    if (this.repositories == null) {
      this.repositories = new LinkedHashSet<>();
    }
    this.repositories.add(repositoriesItem);
    return this;
  }

   /**
   * List of content repositories to limit the search to
   * @return repositories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of content repositories to limit the search to")
  @JsonProperty(JSON_PROPERTY_REPOSITORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getRepositories() {
    return repositories;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_REPOSITORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepositories(Set<String> repositories) {
    this.repositories = repositories;
  }


  public SearchRequest properties(Map<String, String> properties) {
    this.properties = properties;
    return this;
  }

  public SearchRequest putPropertiesItem(String key, String propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

   /**
   * Map of key/value pairs of property names and the values on which the results should be filtered.
   * @return properties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Map of key/value pairs of property names and the values on which the results should be filtered.")
  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Map<String, String> getProperties() {
    return properties;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperties(Map<String, String> properties) {
    this.properties = properties;
  }


  /**
   * Return true if this search-request object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchRequest searchRequest = (SearchRequest) o;
    return Objects.equals(this.searchTerm, searchRequest.searchTerm) &&
        Objects.equals(this.paths, searchRequest.paths) &&
        Objects.equals(this.repositories, searchRequest.repositories) &&
        Objects.equals(this.properties, searchRequest.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(searchTerm, paths, repositories, properties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchRequest {\n");
    sb.append("    searchTerm: ").append(toIndentedString(searchTerm)).append("\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("    repositories: ").append(toIndentedString(repositories)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

