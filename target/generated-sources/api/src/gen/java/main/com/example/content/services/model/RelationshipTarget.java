/*
 * Content Services client
 * Manage content items through multiple repositories.
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.content.services.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;


/**
 * Points to the related content item.
 */
@ApiModel(description = "Points to the related content item.")
@JsonPropertyOrder({
  RelationshipTarget.JSON_PROPERTY_RELATIONSHIP_ID,
  RelationshipTarget.JSON_PROPERTY_REPOSITORY_ID,
  RelationshipTarget.JSON_PROPERTY_CONTENT_ID
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RelationshipTarget {
  public static final String JSON_PROPERTY_RELATIONSHIP_ID = "relationshipId";
  private String relationshipId;

  public static final String JSON_PROPERTY_REPOSITORY_ID = "repositoryId";
  private String repositoryId;

  public static final String JSON_PROPERTY_CONTENT_ID = "contentId";
  private String contentId;

  public RelationshipTarget() { 
  }

  public RelationshipTarget relationshipId(String relationshipId) {
    this.relationshipId = relationshipId;
    return this;
  }

   /**
   * Relationship id.
   * @return relationshipId
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "Relationship id.")
  @JsonProperty(JSON_PROPERTY_RELATIONSHIP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRelationshipId() {
    return relationshipId;
  }


  @JsonProperty(JSON_PROPERTY_RELATIONSHIP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRelationshipId(String relationshipId) {
    this.relationshipId = relationshipId;
  }


  public RelationshipTarget repositoryId(String repositoryId) {
    this.repositoryId = repositoryId;
    return this;
  }

   /**
   * Target repository id.
   * @return repositoryId
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "Target repository id.")
  @JsonProperty(JSON_PROPERTY_REPOSITORY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRepositoryId() {
    return repositoryId;
  }


  @JsonProperty(JSON_PROPERTY_REPOSITORY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRepositoryId(String repositoryId) {
    this.repositoryId = repositoryId;
  }


  public RelationshipTarget contentId(String contentId) {
    this.contentId = contentId;
    return this;
  }

   /**
   * Target content item id.
   * @return contentId
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "Target content item id.")
  @JsonProperty(JSON_PROPERTY_CONTENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getContentId() {
    return contentId;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setContentId(String contentId) {
    this.contentId = contentId;
  }


  /**
   * Return true if this relationship-target object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelationshipTarget relationshipTarget = (RelationshipTarget) o;
    return Objects.equals(this.relationshipId, relationshipTarget.relationshipId) &&
        Objects.equals(this.repositoryId, relationshipTarget.repositoryId) &&
        Objects.equals(this.contentId, relationshipTarget.contentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(relationshipId, repositoryId, contentId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelationshipTarget {\n");
    sb.append("    relationshipId: ").append(toIndentedString(relationshipId)).append("\n");
    sb.append("    repositoryId: ").append(toIndentedString(repositoryId)).append("\n");
    sb.append("    contentId: ").append(toIndentedString(contentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

