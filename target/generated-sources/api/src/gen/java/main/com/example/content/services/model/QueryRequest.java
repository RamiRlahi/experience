/*
 * Content Services client
 * Manage content items through multiple repositories.
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.content.services.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;


/**
 * Content Api provides querying and relationship resolving features as a replacement for CMIS
 */
@ApiModel(description = "Content Api provides querying and relationship resolving features as a replacement for CMIS")
@JsonPropertyOrder({
  QueryRequest.JSON_PROPERTY_IDS,
  QueryRequest.JSON_PROPERTY_PATHS,
  QueryRequest.JSON_PROPERTY_REPOSITORIES,
  QueryRequest.JSON_PROPERTY_LOAD_CONTENT_FOR_TYPES,
  QueryRequest.JSON_PROPERTY_LOAD_CONTENT_FOR_MIME_TYPES,
  QueryRequest.JSON_PROPERTY_LOAD_TARGET_RELATIONSHIPS,
  QueryRequest.JSON_PROPERTY_LOAD_SOURCE_RELATIONSHIPS,
  QueryRequest.JSON_PROPERTY_LOAD_RECURSIVE_RELATIONSHIPS,
  QueryRequest.JSON_PROPERTY_LOAD_PROPERTIES,
  QueryRequest.JSON_PROPERTY_INLINE_RELATIONSHIPS_CONTENT,
  QueryRequest.JSON_PROPERTY_LOAD_RENDITIONS,
  QueryRequest.JSON_PROPERTY_LOAD_CHILDREN,
  QueryRequest.JSON_PROPERTY_LOAD_VERSIONS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class QueryRequest {
  public static final String JSON_PROPERTY_IDS = "ids";
  private Set<String> ids = null;

  public static final String JSON_PROPERTY_PATHS = "paths";
  private Set<String> paths = null;

  public static final String JSON_PROPERTY_REPOSITORIES = "repositories";
  private Set<String> repositories = null;

  public static final String JSON_PROPERTY_LOAD_CONTENT_FOR_TYPES = "loadContentForTypes";
  private Set<String> loadContentForTypes = null;

  public static final String JSON_PROPERTY_LOAD_CONTENT_FOR_MIME_TYPES = "loadContentForMimeTypes";
  private Set<String> loadContentForMimeTypes = null;

  public static final String JSON_PROPERTY_LOAD_TARGET_RELATIONSHIPS = "loadTargetRelationships";
  private Boolean loadTargetRelationships = false;

  public static final String JSON_PROPERTY_LOAD_SOURCE_RELATIONSHIPS = "loadSourceRelationships";
  private Boolean loadSourceRelationships = true;

  public static final String JSON_PROPERTY_LOAD_RECURSIVE_RELATIONSHIPS = "loadRecursiveRelationships";
  private Boolean loadRecursiveRelationships = true;

  public static final String JSON_PROPERTY_LOAD_PROPERTIES = "loadProperties";
  private Boolean loadProperties = false;

  public static final String JSON_PROPERTY_INLINE_RELATIONSHIPS_CONTENT = "inlineRelationshipsContent";
  private Boolean inlineRelationshipsContent = true;

  public static final String JSON_PROPERTY_LOAD_RENDITIONS = "loadRenditions";
  private Boolean loadRenditions = false;

  public static final String JSON_PROPERTY_LOAD_CHILDREN = "loadChildren";
  private Boolean loadChildren = false;

  public static final String JSON_PROPERTY_LOAD_VERSIONS = "loadVersions";
  private Boolean loadVersions = false;

  public QueryRequest() { 
  }

  public QueryRequest ids(Set<String> ids) {
    this.ids = ids;
    return this;
  }

  public QueryRequest addIdsItem(String idsItem) {
    if (this.ids == null) {
      this.ids = new LinkedHashSet<>();
    }
    this.ids.add(idsItem);
    return this;
  }

   /**
   * Content ids to be resolved
   * @return ids
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Content ids to be resolved")
  @JsonProperty(JSON_PROPERTY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getIds() {
    return ids;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIds(Set<String> ids) {
    this.ids = ids;
  }


  public QueryRequest paths(Set<String> paths) {
    this.paths = paths;
    return this;
  }

  public QueryRequest addPathsItem(String pathsItem) {
    if (this.paths == null) {
      this.paths = new LinkedHashSet<>();
    }
    this.paths.add(pathsItem);
    return this;
  }

   /**
   * List of paths of content to be searched. Child folders can be omitted by adding &#39;!&#39; as prefix. For Ex: paths: [&#39;/&#39;, &#39;!/Generated content&#39;] will fetch all children of &#39;/ &#39; except &#39;!/Generated content&#39;
   * @return paths
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of paths of content to be searched. Child folders can be omitted by adding '!' as prefix. For Ex: paths: ['/', '!/Generated content'] will fetch all children of '/ ' except '!/Generated content'")
  @JsonProperty(JSON_PROPERTY_PATHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getPaths() {
    return paths;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_PATHS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaths(Set<String> paths) {
    this.paths = paths;
  }


  public QueryRequest repositories(Set<String> repositories) {
    this.repositories = repositories;
    return this;
  }

  public QueryRequest addRepositoriesItem(String repositoriesItem) {
    if (this.repositories == null) {
      this.repositories = new LinkedHashSet<>();
    }
    this.repositories.add(repositoriesItem);
    return this;
  }

   /**
   * List of content repositories to limit the search to. Skipping this property or specifying multiple repositories is not recommended for performance reasons. Not specified repository is deprecated.
   * @return repositories
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of content repositories to limit the search to. Skipping this property or specifying multiple repositories is not recommended for performance reasons. Not specified repository is deprecated.")
  @JsonProperty(JSON_PROPERTY_REPOSITORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getRepositories() {
    return repositories;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_REPOSITORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRepositories(Set<String> repositories) {
    this.repositories = repositories;
  }


  public QueryRequest loadContentForTypes(Set<String> loadContentForTypes) {
    this.loadContentForTypes = loadContentForTypes;
    return this;
  }

  public QueryRequest addLoadContentForTypesItem(String loadContentForTypesItem) {
    if (this.loadContentForTypes == null) {
      this.loadContentForTypes = new LinkedHashSet<>();
    }
    this.loadContentForTypes.add(loadContentForTypesItem);
    return this;
  }

   /**
   * List of Cmis Types for which content should be loaded
   * @return loadContentForTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of Cmis Types for which content should be loaded")
  @JsonProperty(JSON_PROPERTY_LOAD_CONTENT_FOR_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getLoadContentForTypes() {
    return loadContentForTypes;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_LOAD_CONTENT_FOR_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoadContentForTypes(Set<String> loadContentForTypes) {
    this.loadContentForTypes = loadContentForTypes;
  }


  public QueryRequest loadContentForMimeTypes(Set<String> loadContentForMimeTypes) {
    this.loadContentForMimeTypes = loadContentForMimeTypes;
    return this;
  }

  public QueryRequest addLoadContentForMimeTypesItem(String loadContentForMimeTypesItem) {
    if (this.loadContentForMimeTypes == null) {
      this.loadContentForMimeTypes = new LinkedHashSet<>();
    }
    this.loadContentForMimeTypes.add(loadContentForMimeTypesItem);
    return this;
  }

   /**
   * List of mimeTypes for which content should be loaded
   * @return loadContentForMimeTypes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of mimeTypes for which content should be loaded")
  @JsonProperty(JSON_PROPERTY_LOAD_CONTENT_FOR_MIME_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Set<String> getLoadContentForMimeTypes() {
    return loadContentForMimeTypes;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_LOAD_CONTENT_FOR_MIME_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoadContentForMimeTypes(Set<String> loadContentForMimeTypes) {
    this.loadContentForMimeTypes = loadContentForMimeTypes;
  }


  public QueryRequest loadTargetRelationships(Boolean loadTargetRelationships) {
    this.loadTargetRelationships = loadTargetRelationships;
    return this;
  }

   /**
   * Load the target relationships of fetched items
   * @return loadTargetRelationships
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Load the target relationships of fetched items")
  @JsonProperty(JSON_PROPERTY_LOAD_TARGET_RELATIONSHIPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLoadTargetRelationships() {
    return loadTargetRelationships;
  }


  @JsonProperty(JSON_PROPERTY_LOAD_TARGET_RELATIONSHIPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoadTargetRelationships(Boolean loadTargetRelationships) {
    this.loadTargetRelationships = loadTargetRelationships;
  }


  public QueryRequest loadSourceRelationships(Boolean loadSourceRelationships) {
    this.loadSourceRelationships = loadSourceRelationships;
    return this;
  }

   /**
   * Load the source relationships of fetched items
   * @return loadSourceRelationships
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Load the source relationships of fetched items")
  @JsonProperty(JSON_PROPERTY_LOAD_SOURCE_RELATIONSHIPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLoadSourceRelationships() {
    return loadSourceRelationships;
  }


  @JsonProperty(JSON_PROPERTY_LOAD_SOURCE_RELATIONSHIPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoadSourceRelationships(Boolean loadSourceRelationships) {
    this.loadSourceRelationships = loadSourceRelationships;
  }


  public QueryRequest loadRecursiveRelationships(Boolean loadRecursiveRelationships) {
    this.loadRecursiveRelationships = loadRecursiveRelationships;
    return this;
  }

   /**
   * Load all relationships of fetched items recursively
   * @return loadRecursiveRelationships
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Load all relationships of fetched items recursively")
  @JsonProperty(JSON_PROPERTY_LOAD_RECURSIVE_RELATIONSHIPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLoadRecursiveRelationships() {
    return loadRecursiveRelationships;
  }


  @JsonProperty(JSON_PROPERTY_LOAD_RECURSIVE_RELATIONSHIPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoadRecursiveRelationships(Boolean loadRecursiveRelationships) {
    this.loadRecursiveRelationships = loadRecursiveRelationships;
  }


  public QueryRequest loadProperties(Boolean loadProperties) {
    this.loadProperties = loadProperties;
    return this;
  }

   /**
   * Should load all properties of the fetched items
   * @return loadProperties
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Should load all properties of the fetched items")
  @JsonProperty(JSON_PROPERTY_LOAD_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLoadProperties() {
    return loadProperties;
  }


  @JsonProperty(JSON_PROPERTY_LOAD_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoadProperties(Boolean loadProperties) {
    this.loadProperties = loadProperties;
  }


  public QueryRequest inlineRelationshipsContent(Boolean inlineRelationshipsContent) {
    this.inlineRelationshipsContent = inlineRelationshipsContent;
    return this;
  }

   /**
   * If relationships content should be resolved and inlined in the related json content
   * @return inlineRelationshipsContent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If relationships content should be resolved and inlined in the related json content")
  @JsonProperty(JSON_PROPERTY_INLINE_RELATIONSHIPS_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getInlineRelationshipsContent() {
    return inlineRelationshipsContent;
  }


  @JsonProperty(JSON_PROPERTY_INLINE_RELATIONSHIPS_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInlineRelationshipsContent(Boolean inlineRelationshipsContent) {
    this.inlineRelationshipsContent = inlineRelationshipsContent;
  }


  public QueryRequest loadRenditions(Boolean loadRenditions) {
    this.loadRenditions = loadRenditions;
    return this;
  }

   /**
   * Load all renditions of fetched items 
   * @return loadRenditions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Load all renditions of fetched items ")
  @JsonProperty(JSON_PROPERTY_LOAD_RENDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLoadRenditions() {
    return loadRenditions;
  }


  @JsonProperty(JSON_PROPERTY_LOAD_RENDITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoadRenditions(Boolean loadRenditions) {
    this.loadRenditions = loadRenditions;
  }


  public QueryRequest loadChildren(Boolean loadChildren) {
    this.loadChildren = loadChildren;
    return this;
  }

   /**
   * Should load the children of fetched content
   * @return loadChildren
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Should load the children of fetched content")
  @JsonProperty(JSON_PROPERTY_LOAD_CHILDREN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLoadChildren() {
    return loadChildren;
  }


  @JsonProperty(JSON_PROPERTY_LOAD_CHILDREN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoadChildren(Boolean loadChildren) {
    this.loadChildren = loadChildren;
  }


  public QueryRequest loadVersions(Boolean loadVersions) {
    this.loadVersions = loadVersions;
    return this;
  }

   /**
   * List of all version belonging to specific document.
   * @return loadVersions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of all version belonging to specific document.")
  @JsonProperty(JSON_PROPERTY_LOAD_VERSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLoadVersions() {
    return loadVersions;
  }


  @JsonProperty(JSON_PROPERTY_LOAD_VERSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLoadVersions(Boolean loadVersions) {
    this.loadVersions = loadVersions;
  }


  /**
   * Return true if this query-request object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryRequest queryRequest = (QueryRequest) o;
    return Objects.equals(this.ids, queryRequest.ids) &&
        Objects.equals(this.paths, queryRequest.paths) &&
        Objects.equals(this.repositories, queryRequest.repositories) &&
        Objects.equals(this.loadContentForTypes, queryRequest.loadContentForTypes) &&
        Objects.equals(this.loadContentForMimeTypes, queryRequest.loadContentForMimeTypes) &&
        Objects.equals(this.loadTargetRelationships, queryRequest.loadTargetRelationships) &&
        Objects.equals(this.loadSourceRelationships, queryRequest.loadSourceRelationships) &&
        Objects.equals(this.loadRecursiveRelationships, queryRequest.loadRecursiveRelationships) &&
        Objects.equals(this.loadProperties, queryRequest.loadProperties) &&
        Objects.equals(this.inlineRelationshipsContent, queryRequest.inlineRelationshipsContent) &&
        Objects.equals(this.loadRenditions, queryRequest.loadRenditions) &&
        Objects.equals(this.loadChildren, queryRequest.loadChildren) &&
        Objects.equals(this.loadVersions, queryRequest.loadVersions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ids, paths, repositories, loadContentForTypes, loadContentForMimeTypes, loadTargetRelationships, loadSourceRelationships, loadRecursiveRelationships, loadProperties, inlineRelationshipsContent, loadRenditions, loadChildren, loadVersions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryRequest {\n");
    sb.append("    ids: ").append(toIndentedString(ids)).append("\n");
    sb.append("    paths: ").append(toIndentedString(paths)).append("\n");
    sb.append("    repositories: ").append(toIndentedString(repositories)).append("\n");
    sb.append("    loadContentForTypes: ").append(toIndentedString(loadContentForTypes)).append("\n");
    sb.append("    loadContentForMimeTypes: ").append(toIndentedString(loadContentForMimeTypes)).append("\n");
    sb.append("    loadTargetRelationships: ").append(toIndentedString(loadTargetRelationships)).append("\n");
    sb.append("    loadSourceRelationships: ").append(toIndentedString(loadSourceRelationships)).append("\n");
    sb.append("    loadRecursiveRelationships: ").append(toIndentedString(loadRecursiveRelationships)).append("\n");
    sb.append("    loadProperties: ").append(toIndentedString(loadProperties)).append("\n");
    sb.append("    inlineRelationshipsContent: ").append(toIndentedString(inlineRelationshipsContent)).append("\n");
    sb.append("    loadRenditions: ").append(toIndentedString(loadRenditions)).append("\n");
    sb.append("    loadChildren: ").append(toIndentedString(loadChildren)).append("\n");
    sb.append("    loadVersions: ").append(toIndentedString(loadVersions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

