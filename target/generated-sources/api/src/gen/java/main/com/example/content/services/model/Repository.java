/*
 * Content Services client
 * Manage content items through multiple repositories.
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.content.services.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.example.content.services.model.AntivirusScanTrigger;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;


/**
 * CMIS Repository type
 */
@ApiModel(description = "CMIS Repository type")
@JsonPropertyOrder({
  Repository.JSON_PROPERTY_REPOSITORY_ID,
  Repository.JSON_PROPERTY_NAME,
  Repository.JSON_PROPERTY_DESCRIPTION,
  Repository.JSON_PROPERTY_IS_PRIVATE,
  Repository.JSON_PROPERTY_IS_PROTECTED,
  Repository.JSON_PROPERTY_IMPLEMENTATION,
  Repository.JSON_PROPERTY_VERSIONING_ENABLED,
  Repository.JSON_PROPERTY_CONFIG_DATA,
  Repository.JSON_PROPERTY_ANTIVIRUS_SCAN_TRIGGER
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Repository {
  public static final String JSON_PROPERTY_REPOSITORY_ID = "repositoryId";
  private String repositoryId;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_IS_PRIVATE = "isPrivate";
  private Boolean isPrivate = false;

  public static final String JSON_PROPERTY_IS_PROTECTED = "isProtected";
  private Boolean isProtected = false;

  public static final String JSON_PROPERTY_IMPLEMENTATION = "implementation";
  private String implementation;

  public static final String JSON_PROPERTY_VERSIONING_ENABLED = "versioningEnabled";
  private Boolean versioningEnabled = true;

  public static final String JSON_PROPERTY_CONFIG_DATA = "configData";
  private String configData;

  public static final String JSON_PROPERTY_ANTIVIRUS_SCAN_TRIGGER = "antivirusScanTrigger";
  private AntivirusScanTrigger antivirusScanTrigger = AntivirusScanTrigger.NONE;

  public Repository() { 
  }

  public Repository repositoryId(String repositoryId) {
    this.repositoryId = repositoryId;
    return this;
  }

   /**
   * Repository id.
   * @return repositoryId
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "Repository id.")
  @JsonProperty(JSON_PROPERTY_REPOSITORY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRepositoryId() {
    return repositoryId;
  }


  @JsonProperty(JSON_PROPERTY_REPOSITORY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRepositoryId(String repositoryId) {
    this.repositoryId = repositoryId;
  }


  public Repository name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Repository name.
   * @return name
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "Repository name.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Repository description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Repository description.
   * @return description
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "Repository description.")
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  public Repository isPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
    return this;
  }

   /**
   * Whether or not the repository is marked as private within Content Services
   * @return isPrivate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether or not the repository is marked as private within Content Services")
  @JsonProperty(JSON_PROPERTY_IS_PRIVATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsPrivate() {
    return isPrivate;
  }


  @JsonProperty(JSON_PROPERTY_IS_PRIVATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
  }


  public Repository isProtected(Boolean isProtected) {
    this.isProtected = isProtected;
    return this;
  }

   /**
   * Whether or not the repository is marked as protected with Access Control
   * @return isProtected
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Whether or not the repository is marked as protected with Access Control")
  @JsonProperty(JSON_PROPERTY_IS_PROTECTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsProtected() {
    return isProtected;
  }


  @JsonProperty(JSON_PROPERTY_IS_PROTECTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsProtected(Boolean isProtected) {
    this.isProtected = isProtected;
  }


  public Repository implementation(String implementation) {
    this.implementation = implementation;
    return this;
  }

   /**
   * Storage implementation name
   * @return implementation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Storage implementation name")
  @JsonProperty(JSON_PROPERTY_IMPLEMENTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getImplementation() {
    return implementation;
  }


  @JsonProperty(JSON_PROPERTY_IMPLEMENTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImplementation(String implementation) {
    this.implementation = implementation;
  }


  public Repository versioningEnabled(Boolean versioningEnabled) {
    this.versioningEnabled = versioningEnabled;
    return this;
  }

   /**
   * Flag that indicates whether repository versioned
   * @return versioningEnabled
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Flag that indicates whether repository versioned")
  @JsonProperty(JSON_PROPERTY_VERSIONING_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getVersioningEnabled() {
    return versioningEnabled;
  }


  @JsonProperty(JSON_PROPERTY_VERSIONING_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVersioningEnabled(Boolean versioningEnabled) {
    this.versioningEnabled = versioningEnabled;
  }


  public Repository configData(String configData) {
    this.configData = configData;
    return this;
  }

   /**
   * configuration data
   * @return configData
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "configuration data")
  @JsonProperty(JSON_PROPERTY_CONFIG_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConfigData() {
    return configData;
  }


  @JsonProperty(JSON_PROPERTY_CONFIG_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfigData(String configData) {
    this.configData = configData;
  }


  public Repository antivirusScanTrigger(AntivirusScanTrigger antivirusScanTrigger) {
    this.antivirusScanTrigger = antivirusScanTrigger;
    return this;
  }

   /**
   * Get antivirusScanTrigger
   * @return antivirusScanTrigger
  **/
  @javax.annotation.Nullable
  @Valid
  @ApiModelProperty(value = "")
  @JsonProperty(JSON_PROPERTY_ANTIVIRUS_SCAN_TRIGGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AntivirusScanTrigger getAntivirusScanTrigger() {
    return antivirusScanTrigger;
  }


  @JsonProperty(JSON_PROPERTY_ANTIVIRUS_SCAN_TRIGGER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAntivirusScanTrigger(AntivirusScanTrigger antivirusScanTrigger) {
    this.antivirusScanTrigger = antivirusScanTrigger;
  }


  /**
   * Return true if this repository object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Repository repository = (Repository) o;
    return Objects.equals(this.repositoryId, repository.repositoryId) &&
        Objects.equals(this.name, repository.name) &&
        Objects.equals(this.description, repository.description) &&
        Objects.equals(this.isPrivate, repository.isPrivate) &&
        Objects.equals(this.isProtected, repository.isProtected) &&
        Objects.equals(this.implementation, repository.implementation) &&
        Objects.equals(this.versioningEnabled, repository.versioningEnabled) &&
        Objects.equals(this.configData, repository.configData) &&
        Objects.equals(this.antivirusScanTrigger, repository.antivirusScanTrigger);
  }

  @Override
  public int hashCode() {
    return Objects.hash(repositoryId, name, description, isPrivate, isProtected, implementation, versioningEnabled, configData, antivirusScanTrigger);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Repository {\n");
    sb.append("    repositoryId: ").append(toIndentedString(repositoryId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    isProtected: ").append(toIndentedString(isProtected)).append("\n");
    sb.append("    implementation: ").append(toIndentedString(implementation)).append("\n");
    sb.append("    versioningEnabled: ").append(toIndentedString(versioningEnabled)).append("\n");
    sb.append("    configData: ").append(toIndentedString(configData)).append("\n");
    sb.append("    antivirusScanTrigger: ").append(toIndentedString(antivirusScanTrigger)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

