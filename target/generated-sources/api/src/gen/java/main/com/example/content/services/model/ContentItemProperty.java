/*
 * Content Services client
 * Manage content items through multiple repositories.
 *
 * The version of the OpenAPI document: 3.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.example.content.services.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import javax.validation.constraints.*;
import javax.validation.Valid;


/**
 * ContentItemProperty
 */
@JsonPropertyOrder({
  ContentItemProperty.JSON_PROPERTY_PROPERTY_ID,
  ContentItemProperty.JSON_PROPERTY_VALUE,
  ContentItemProperty.JSON_PROPERTY_PROPERTY_TYPE
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class ContentItemProperty {
  public static final String JSON_PROPERTY_PROPERTY_ID = "propertyId";
  private String propertyId;

  public static final String JSON_PROPERTY_VALUE = "value";
  private String value;

  public static final String JSON_PROPERTY_PROPERTY_TYPE = "propertyType";
  private String propertyType;

  public ContentItemProperty() { 
  }

  public ContentItemProperty propertyId(String propertyId) {
    this.propertyId = propertyId;
    return this;
  }

   /**
   * Property Id.
   * @return propertyId
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "Property Id.")
  @JsonProperty(JSON_PROPERTY_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPropertyId() {
    return propertyId;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPropertyId(String propertyId) {
    this.propertyId = propertyId;
  }


  public ContentItemProperty value(String value) {
    this.value = value;
    return this;
  }

   /**
   * Property value.
   * @return value
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "Property value.")
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValue(String value) {
    this.value = value;
  }


  public ContentItemProperty propertyType(String propertyType) {
    this.propertyType = propertyType;
    return this;
  }

   /**
   * Type of property.
   * @return propertyType
  **/
  @javax.annotation.Nonnull
  @NotNull
  @ApiModelProperty(required = true, value = "Type of property.")
  @JsonProperty(JSON_PROPERTY_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPropertyType() {
    return propertyType;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPropertyType(String propertyType) {
    this.propertyType = propertyType;
  }


  /**
   * Return true if this content-item-property object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentItemProperty contentItemProperty = (ContentItemProperty) o;
    return Objects.equals(this.propertyId, contentItemProperty.propertyId) &&
        Objects.equals(this.value, contentItemProperty.value) &&
        Objects.equals(this.propertyType, contentItemProperty.propertyType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyId, value, propertyType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentItemProperty {\n");
    sb.append("    propertyId: ").append(toIndentedString(propertyId)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    propertyType: ").append(toIndentedString(propertyType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

